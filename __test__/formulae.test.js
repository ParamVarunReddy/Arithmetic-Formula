const FormulaArithmetic = require('../dist/formulae.cjs.js');

describe('FormulaArithmetic', () => {
    const parser = new FormulaArithmetic();
    const testCases = [
        // [Excel-style, Simple math equivalent, Expected result]
        ["ADD(2, 3) * 4 - DIVIDE(5, (1 + 1))", "(2 + 3) * 4 - (5 / (1 + 1))", 17.5],
        ["SUBTRACT(10, 2) + MULTIPLY(3, 4)", "(10 - 2) + (3 * 4)", 20],
        ["POWER(2, 3) + MOD(10, 3)", "(2 ^ 3) + (10 % 3)", 9],
        ["DIVIDE(8, 2) + ADD(1, 1)", "(8 / 2) + (1 + 1)", 6],
        ["MULTIPLY(5, (2 + 3)) - POWER(3, 2)", "(5 * (2 + 3)) - (3 ^ 2)", 16],
        ["ADD(MULTIPLY(2, 3), POWER(2, 3)) * DIVIDE(12, 4) - MOD(17, 5)", "((2 * 3) + (2 ^ 3)) * (12 / 4) - (17 % 5)", 40],
        ["POWER(ADD(2, 3), 2) - MULTIPLY(4, DIVIDE(8, 2)) + MOD(15, 4)", "((2 + 3) ^ 2) - (4 * (8 / 2)) + (15 % 4)", 12],
        ["DIVIDE(MULTIPLY(ADD(2, 3), 4), SUBTRACT(10, 2)) + POWER(2, 3)", "(((2 + 3) * 4) / (10 - 2)) + (2 ^ 3)", 10.5],
        ["ADD(2, MULTIPLY(3, POWER(2, 2))) - DIVIDE(16, 4) + MOD(20, 6)", "2 + (3 * (2 ^ 2)) - (16 / 4) + (20 % 6)", 12],
        ["POWER(2, POWER(3, 2)) - MULTIPLY(3, ADD(2, 2)) + DIVIDE(18, 3)", "(2 ^ (3 ^ 2)) - (3 * (2 + 2)) + (18 / 3)", 506],
        ["ADD(1, MULTIPLY(2, ADD(3, MULTIPLY(4, 5))))", "1 + (2 * (3 + (4 * 5)))", 47],
        ["SUBTRACT(100, MULTIPLY(ADD(10, 5), DIVIDE(30, 6)))", "100 - ((10 + 5) * (30 / 6))", 25],
        ["DIVIDE(POWER(2, 5), ADD(3, 5)) + MOD(27, 4)", "(2 ^ 5) / (3 + 5) + (27 % 4)", 7],
        ["MULTIPLY(ADD(2, 3), SUBTRACT(10, 4)) / POWER(2, 2)", "((2 + 3) * (10 - 4)) / (2 ^ 2)", 7.5],
        ["ADD(POWER(2, 3), MULTIPLY(3, MOD(14, 5)))", "(2 ^ 3) + (3 * (14 % 5))", 20],
        ["POWER(ADD(MULTIPLY(2, 3), 4), SUBTRACT(5, 2))", "((2 * 3) + 4) ^ (5 - 2)", 1000],
        ["DIVIDE(ADD(POWER(2, 3), MULTIPLY(3, 4)), SUBTRACT(20, MOD(15, 4)))", "((2 ^ 3) + (3 * 4)) / (20 - (15 % 4))", 1.1764705882352942],
        ["MOD(POWER(ADD(2, 2), 3), MULTIPLY(2, 5))", "((2 + 2) ^ 3) % (2 * 5)", 4],
        ["ADD(POWER(2, ADD(2, 1)), MULTIPLY(3, SUBTRACT(10, 7)))", "(2 ^ (2 + 1)) + (3 * (10 - 7))", 17],
        ["DIVIDE(MULTIPLY(ADD(2, 3), POWER(2, 2)), SUBTRACT(20, MULTIPLY(2, 3)))", "((2 + 3) * (2 ^ 2)) / (20 - (2 * 3))", 1.4285714285714286],
        ["ADD(2.5, 3.75) * 4.1 - DIVIDE(5.25, (1.2 + 1.3))", "(2.5 + 3.75) * 4.1 - (5.25 / (1.2 + 1.3))", 23.524999999999995],
        ["SUBTRACT(10.123456789, 2.987654321) + MULTIPLY(3.333333333, 4.444444444)", "(10.123456789 - 2.987654321) + (3.333333333 * 4.444444444)", 21.950617279851855],
        ["POWER(2.1, 3.2) + MOD(10.5, 3.3)", "(2.1 ^ 3.2) + (10.5 % 3.3)", 11.342410477394711],
        ["DIVIDE(8.888888888, 2.222222222) + ADD(1.111111111, 1.999999999)", "(8.888888888 / 2.222222222) + (1.111111111 + 1.999999999)", 7.1111111099999995],
        ["MULTIPLY(5.555555555, (2.222222222 + 3.333333333)) - POWER(3.141592653, 2.718281828)", "(5.555555555 * (2.222222222 + 3.333333333)) - (3.141592653 ^ 2.718281828)", 8.405039829593619],
        ["ADD(MULTIPLY(2.01, 3.02), POWER(2.03, 3.04)) * DIVIDE(12.05, 4.06) - MOD(17.07, 5.08)", "((2.01 * 3.02) + (2.03 ^ 3.04)) * (12.05 / 4.06) - (17.07 % 5.08)", 41.727885117728746],
        ["POWER(ADD(2.0001, 3.0002), 2.0003) - MULTIPLY(4.0004, DIVIDE(8.0005, 2.0006)) + MOD(15.0007, 4.0008)", "((2.0001 + 3.0002) ^ 2.0003) - (4.0004 * (8.0005 / 2.0006)) + (15.0007 % 4.0008)", 12.015574928262131],
        ["DIVIDE(MULTIPLY(ADD(2.123456789, 3.987654321), 4.555555555), SUBTRACT(10.111111111, 2.222222222)) + POWER(2.333333333, 3.444444444)", "(((2.123456789 + 3.987654321) * 4.555555555) / (10.111111111 - 2.222222222)) + (2.333333333 ^ 3.444444444)", 22.041900003303216],
        ["ADD(2.000000001, MULTIPLY(3.000000002, POWER(2.000000003, 2.000000004))) - DIVIDE(16.000000005, 4.000000006) + MOD(20.000000007, 6.000000008)", "2.000000001 + (3.000000002 * (2.000000003 ^ 2.000000004)) - (16.000000005 / 4.000000006) + (20.000000007 % 6.000000008)", 12.000000066021062],
        ["POWER(2.00000001, POWER(3.00000002, 2.00000003)) - MULTIPLY(3.00000004, ADD(2.00000005, 2.00000006)) + DIVIDE(18.00000007, 3.00000008)", "(2.00000001 ^ (3.00000002 ^ 2.00000003)) - (3.00000004 * (2.00000005 + 2.00000006)) + (18.00000007 / 3.00000008)", 506.00017027008994],
        ["MULTIPLY(4, MULTIPLY(3, MULTIPLY(3, MULTIPLY(2, 2))))", "4 * 3 * 3 * 2 * 2", 144],
        ["ADD(1, 2, 3, 4, 5)", "1 + 2 + 3 + 4 + 5", 15],
        ["SUBTRACT(20, SUBTRACT(5, SUBTRACT(3, 2)))", "(20 - (5 - (3 - 2)))", 16],
        ["DIVIDE(120, DIVIDE(5, DIVIDE(2, 2)))", "120 / 5 / 2 / 2", 24],
        ["ADD(MULTIPLY(2, 3), MULTIPLY(4, 5))", "(2 * 3) + (4 * 5)", 26],
        ["MULTIPLY(ADD(1, 2), ADD(3, 4))", "(1 + 2) * (3 + 4)", 21],
        ["DIVIDE(MULTIPLY(2, 3), ADD(1, 1))", "(2 * 3) / (1 + 1)", 3],
        ["ADD(1.1, 2.2, 3.3, 4.4, 5.5)", "1.1 + 2.2 + 3.3 + 4.4 + 5.5", 16.5],
        ["MULTIPLY(1.01, 2.02, 3.03, 4.04)", "1.01 * 2.02 * 3.03 * 4.04", 24.97449624],
        ["ADD(MULTIPLY(1.1, 2.2, 3.3), 4.4, 5.5)", "(1.1 * 2.2 * 3.3) + 4.4 + 5.5", 17.886000000000003],
        ["MULTIPLY(ADD(1.11, 2.22, 3.33), 4.44, 5.55)", "(1.11 + 2.22 + 3.33) * 4.44 * 5.55", 164.11572],
        ["ADD(1.23456789, MULTIPLY(2.34567891, 3.45678912, 4.56789123), 5.67891234)", "1.23456789 + (2.34567891 * 3.45678912 * 4.56789123) + 5.67891234", 43.95230545331292],
        ["MULTIPLY(ADD(1.000000001, 2.000000002, 3.000000003), ADD(4.000000004, 5.000000005, 6.000000006))", "(1.000000001 + 2.000000002 + 3.000000003) * (4.000000004 + 5.000000005 + 6.000000006)", 90.00000018000001],
        ["ADD(MULTIPLY(1.1, 2.2), MULTIPLY(3.3, 4.4), 5.5, 6.6)", "(1.1 * 2.2) + (3.3 * 4.4) + 5.5 + 6.6", 29.04],
        ["MULTIPLY(ADD(1.01, 2.02), ADD(3.03, 4.04), 5.05)", "(1.01 + 2.02) * (3.03 + 4.04) * 5.05", 108.18160500000002],
        ["ADD(1.0000000001, 2.0000000002, 3.0000000003, 4.0000000004, 5.0000000005, 6.0000000006)", "1.0000000001 + 2.0000000002 + 3.0000000003 + 4.0000000004 + 5.0000000005 + 6.0000000006", 21.000000002100002],
        ["MULTIPLY(1.00000001, 2.00000002, 3.00000003, 4.00000004, 5.00000005)", "1.00000001 * 2.00000002 * 3.00000003 * 4.00000004 * 5.00000005", 120.00000600000007],
        ["SUBTRACT(1.00000001, 2.00000002, 3.00000003, 4.00000004, 5.00000005)", "1.00000001 - 2.00000002 - 3.00000003 - 4.00000004 - 5.00000005", -13.00000013]
    ];

    testCases.forEach(([expr, _desc, expected]) => {
        it(`should evaluate: ${expr}`, () => {
            const result = parser.evaluate(expr);
            expect(Number(result)).toBeCloseTo(expected, 8);
        });
    });
});
